
name: Build iOS
on:
  workflow_dispatch: 
    inputs:
        lane:
          description: 'Fastlane lane to use (beta OR firebase OR production)'
          required: true
          default: 'firebase'
 

jobs:
  buildUnityIOS:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        projectPath:
          - unity/unity_project
        unityVersion:
          - 2019.4.27f1
        targetPlatform:
          - iOS

    steps:
      # Checkout
      - name: Checkout repository
        uses: actions/checkout@v2
        # with:
          # lfs: true

      # Cache Library
      - uses: actions/cache@v2
        with:
          path: ${{ matrix.projectPath }}/Library
          key: Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-${{ matrix.projectPath }}-
            Library-

      # Cache Unity Grpc
      - name: Cache Unity Grpc
        id: cache-unity-grpc
        uses: actions/cache@v2
        with:
          path: ${{ matrix.projectPath }}/Assets/Plugins
          key: AssetsPlugins-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}

      - name: Download grpc_unity_package
        if: steps.cache-unity-grpc.outputs.cache-hit != 'true'
        id: terminal-download-grpc
        run: |
          curl -o ~/grpc_unity_package.zip "https://packages.grpc.io/archive/2021/07/3e19babc1e53a31b393ddc84f7c7b6fcd100e4ef-f5359c83-c239-4754-a5cf-ab95c15c7964/csharp/grpc_unity_package.2.39.0-dev202107011005.zip"
          unzip ~/grpc_unity_package.zip -d "unity/unity_project/Assets/"
          rm -f ~/grpc_unity_package.zip

      # Build Unity
      - run: make enable_config_ios
      - name: Build project
        uses: game-ci/unity-builder@v2
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          allowDirtyBuild: true
          projectPath: ${{ matrix.projectPath }}
          unityVersion: ${{ matrix.unityVersion }}
          targetPlatform: ${{ matrix.targetPlatform }}
          buildMethod: Build.DoBuildIOS

      - name: Upload Build to Artifact
        uses: actions/upload-artifact@v2
        with:
          name: build-iOS
          path: ios/UnityLibrary


  buildFlutterIOS:
    name: Build iOS on MacOS
    runs-on: macos-latest
    needs: buildUnityIOS
    env:
      IOS_BUILD_PATH: ${{ format('{0}/ios', github.workspace) }}
    steps:
      # Set up Flutter.
      - name: Clone Flutter repository with master channel
        uses: subosito/flutter-action@v1.5.0
        with:
          channel: stable
      - run: flutter doctor -v

      # Checkout
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Download iOS Artifact
        uses: actions/download-artifact@v2
        with:
          name: build-iOS
          path: ios/UnityLibrary
          
      # Check result of Download iOS Artifact
      - run: ls ios/UnityLibrary

      # Before all, let `pub get`
      - run: flutter pub get
        
      # Fix File Permissions (after build Unity)
      - name: Fix File Permissions
        id: terminal-fix-permissions
        run: |
          find $IOS_BUILD_PATH -type f -name "**.sh" -exec chmod +x {} \;
          find $IOS_BUILD_PATH -type f -iname "usymtool" -exec chmod +x {} \;

      # Build to Sync dart code to ios native code
      - run: flutter build ios --release --no-codesign

      # Setup Ruby, Bundler, and Gemfile dependencies
      - name: Setup Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '2.6'
          bundler-cache: true
          working-directory: ios
          
      # Build and deploy with Fastlane (by default, to beta track) ðŸš€.
      - name: Run fastlane deploy
        run: bundle exec fastlane ${{ github.event.inputs.lane || 'beta' }}        
        env:
          FASTLANE_USER: ${{ secrets.FASTLANE_USER}}
          FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
          FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD}}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD}}
          MATCH_GIT_BASIC_AUTHORIZATION: ${{secrets.MATCH_GIT_BASIC_AUTHORIZATION}}
          FIREBASE_CLI_TOKEN: ${{secrets.FIREBASE_CLI_TOKEN}}
        working-directory: ios