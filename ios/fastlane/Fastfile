# 
# You can find the documentation at https://docs.fastlane.tools
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

xcodeproj = './Runner.xcodeproj'
workspace = './Runner.xcworkspace'
keychainName = "loveblocs_custom"
keychainPassword = "LoveBlocks2021"
testGroup = "eng, goldenowl"
testApp = "1:387777038403:ios:d50ba4a78265f69e8becf6"

def delete_temp_keychain(name)
  delete_keychain(
    name: name
  ) if File.exist? File.expand_path("~/Library/Keychains/#{name}-db")
end

def create_temp_keychain(name, password)
  create_keychain(
    name: name,
    password: password,
    unlock: true,
    default_keychain: false, 
    lock_when_sleeps: false,
  )
end

def ensure_temp_keychain(name, password)
  delete_temp_keychain(name)
  create_temp_keychain(name, password)
end

default_platform(:ios)

platform :ios do

  before_all do
    # set up public env
    ENV['FASTLANE_ITC_TEAM_ID'] = CredentialsManager::AppfileConfig.try_fetch_value(:itc_team_id)
    ENV['FASTLANE_TEAM_ID'] = CredentialsManager::AppfileConfig.try_fetch_value(:team_id)
    ENV["MATCH_APP_IDENTIFIER"] = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
  end

  desc 'Increment build number greater than number in store'
  lane :increment_build_number_manually do
    increment_build_number({
      xcodeproj: xcodeproj,
      build_number: latest_testflight_build_number(app_identifier: ENV["MATCH_APP_IDENTIFIER"]) + 1
    })
  end

  desc 'Fetch certificates and provisioning profiles'
  lane :certificates_manually do |options|
    ENV["PROVISIONING_PROFILE_SPECIFIER"] = "match " + (options[:release] ? "AppStore " : "Development ") + ENV["MATCH_APP_IDENTIFIER"]
    match(
      app_identifier: ENV["MATCH_APP_IDENTIFIER"],
      type: (options[:release] ? "appstore" : "development"),
      readonly: true,
    )

    update_code_signing_settings(
      bundle_identifier: ENV["MATCH_APP_IDENTIFIER"],
      use_automatic_signing: false,
      path: xcodeproj,
      targets: "Runner",
      code_sign_identity: (options[:release] ? "Apple Distribution" : "Apple Development"),
      profile_name: ENV["PROVISIONING_PROFILE_SPECIFIER"]
    )
  end

  desc 'Fetch certificates and provisioning profiles'
  lane :certificates do |options|
    ENV["PROVISIONING_PROFILE_SPECIFIER"] = "match " + (options[:release] ? "AppStore " : "Development ") + ENV["MATCH_APP_IDENTIFIER"]
    ensure_temp_keychain(keychainName, keychainPassword)

    match(
      app_identifier: ENV["MATCH_APP_IDENTIFIER"],
      type: (options[:release] ? "appstore" : "development"),
      readonly: true,
      keychain_name: keychainName,
      keychain_password: keychainPassword,
    )

    update_code_signing_settings(
      bundle_identifier: ENV["MATCH_APP_IDENTIFIER"],
      use_automatic_signing: false,
      path: xcodeproj,
      targets: "Runner",
      # build_configurations: (options[:release] ? "Release" : "Release"),
      code_sign_identity: (options[:release] ? "Apple Distribution" : "Apple Development"),
      profile_name: ENV["PROVISIONING_PROFILE_SPECIFIER"]
    )
  end

  desc "Setup and Build with options"
  private_lane :build do |options|
    # increment_build_number_manually
    certificates(release: options[:release], profile_name: ENV["PROVISIONING_PROFILE_SPECIFIER"])
  
    settings_to_override = {
      :BUNDLE_IDENTIFIER => ENV["MATCH_APP_IDENTIFIER"],
      :PROVISIONING_PROFILE_SPECIFIER => ENV["PROVISIONING_PROFILE_SPECIFIER"],
      :DEVELOPMENT_TEAM => ENV['FASTLANE_TEAM_ID']
    }

    build_app(
      scheme: "Runner",
      workspace: workspace,
      xcargs: settings_to_override,
      # export_method: (options[:release] ? "app-store" : "development"),
      ### archive_path: "./build/Runner.xcarchive",
      ### output_directory: "./build/Runner",
      ### skip because there are 2 more target: unity_framework & unity_project
      skip_profile_detection: true,
      export_options: {
        provisioningProfiles: { 
          ENV["MATCH_APP_IDENTIFIER"] => ENV["PROVISIONING_PROFILE_SPECIFIER"],
        }
      }
    )
  end

  desc "Push a new beta build to TestFlight"
  lane :beta do
    build(release: true)
    # changelog_from_git_commits
    
    # testflight(
    #   skip_waiting_for_build_processing: true
    # )
    delete_temp_keychain(keychainName)
  end

  desc "Push a new beta build to Firebase"
  lane :firebase do
    build(release: true)

    # firebase_app_distribution
    delete_temp_keychain(keychainName)
  end

end
